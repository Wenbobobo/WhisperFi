隐私DeFi协议 (暂定名: Phantom Protocol) 产品文档
版本: 1.1 (Strategic Pivot)
日期: 2025年7月7日
目标: 本文档旨在定义一个创新的隐私DeFi协议的核心功能、技术方案与发展路线图，旨在解决链上交易者的隐私保护与防狙击问题。本文档是黑客松开发和未来商业化的指导蓝图。

## 1. 项目愿景与使命 (Vision & Mission)
**愿景:** 成为Web3世界中主动交易者（Active Trader）和策略执行者的首选隐私基础设施，让复杂的DeFi操作能以完全匿名、安全、非托管的方式进行。

**使命:** 通过尖端的��知识证明（ZK）技术和**一个由协议管理的、具备MEV感知能力的Relayer执行网络**，将用户的“交易意图”与他们的“公开身份”彻底分离。我们的核心是**通过私有订单流（Private Order Flow）直接与区块构建者（Block Builders）交互**，从根本上保护用户免受MEV狙击、保护交易策略不被泄露，并最终实现一个真正公平和私密的去中心化金融生态。

## 2. 目标用户 (Target Audience)
- **链上大户 (Whales):** 需要执行大额交易，极易被三明治攻击等MEV策略狙击的个人或实体。
- **DeFi基金与量化团队:** 运行复杂交易策略（如套利、LP管理），不希望其交易模式被追踪和复制。
- **注重隐私的普通交易者:** 希望在与公开DeFi协议交互时，保护个人财务隐私不被暴露的活跃用户。
- **DAO与项目方:** 需要以隐私方式进行财库管理、代币分发或空投的组织。

## 3. 核心用户旅程 (Core User Journey)
用户与协议的交互分为三个核心阶段，全程保持非托管和匿名：

**阶段一：存款 (Deposit) - 进入隐私护盾**
- 用户连接自己的常规钱包（如MetaMask）。
- 在协议前端，用户决定存入一笔资产（如10 ETH）。
- 前端为用户生成一个链下的“主密钥”（Master Secret），并安全地存储在本地。
- 前端根据存款金额、资产类型和主密钥，构造一个加密的“私密票据 (Private Note)”。
- 用户授权交易，将10 ETH发送至协议的隐私资金池 (Privacy Pool) 合约。同时，票据的哈希（Commitment）被提交上链，并插入到池子的Merkle树中。

**阶段二：交易 (Trade) - 通过Relayer进行MEV保护下的匿名执行**
- 用户在前端决定执行一笔交易，例如：“用我隐私余额中的5 ETH，在Uniswap V3上兑换成USDC”。
- 用户输入交易指令（目标协议、金额、滑点等）。
- 前端使用用户的“主密钥”和“私密票据”，在浏览器后台生成一个复杂的ZK证明。该证明同时证实所有权、防双花和指令授权。
- **关键步骤:** 该ZK证明和公开的交易指令被发送到**Phantom Protocol的Relayer私有API端点**。
- **Relayer执行:**
    1. Relayer验证ZK证明的有效性。
    2. Relayer将用户的交易请求打包成一个标准的以太坊交易。
    3. **MEV保护:** Relayer**不会**将此交易广播到公共mempool，而是通过一个私有通道（如Flashbots Protect）直接发送给一个或多个区块构建者（Block Builder）。
    4. 区块构建者将交易打包上链，协议的执行代理 (Execution Proxy) 在Uniswap上完成该笔交易。
- **链上结果:** Etherscan只能看到一笔由协议的“执行代理地址”发起的Uniswap交易。这笔交易与用户的原始存款地址之间没有任何可追踪的链接，并且在整个过程中免受了MEV攻击。

**阶段三：提款 (Withdraw) - 安全离开**
- 用户决定将隐私余额中的资产（如8 ETH）提取到全新的公开地址。
- 前端生成一个ZK证明，证明其对资产的所有权。
- 协议验证证明后，将8 ETH从资金池发送到用户指定的全新地址。

## 4. 产品功能规划 (Feature Breakdown)

### 4.1. MVP (黑客松/V1版本) 功能
- **用户端 (Frontend):** [P0] 密钥管理, [P0] 资产存入, [P0] 隐私余额看板, [P0] 匿名交易执行, [P0] 资产提取。
- **协议/后端 (Protocol/Backend):**
    - [P0] ZK电路 (Circom): `Deposit`, `Withdraw`, `Trade` 电路。
    - [P0] 智能合约 (Solidity): `PrivacyPool.sol`, `Verifier.sol`, `ExecutionProxy.sol`。
    - [P0] **核心中继器 (Relayer):**
        - 一个中心化的Node.js脚本，扮演核心角色。
        - 提供API接收用户的证明和交易指令。
        - 管理一个EOA地址池作为执行代理。
        - **集成与区块构建者的私有通信（例如，通过ethers.js调用Flashbots的RPC端点）。**

### 4.2. 未来功能 (Post-MVP / V2 Roadmap)
- [P1] **去中心化和高可用的Relayer网络:** 建立一个由多个（可能是许可的）节点组成的网络来处理交易，确保服务的稳定性和抗审查性。
- [P1] **意图驱动的执行 (Intent-Based Execution):** 用户签署“意图”，由Relayer网络中的求解器（Solvers）竞争寻找最佳执行路径，进一步优化价格并实现MEV返还。
- [P1] **隐私策略金库 (Private Strategy Vaults):** 允许用户将资金存入执行预设策略的隐私金库，策略逻辑和操作记录完全保密。
- [P2] **机密空投与归属 (Confidential Airdrops & Vesting):** 为DAO和项目方提供服务。
- [P2] **账户抽象 (Account Abstraction - ERC-4337) UX增强:** 探索使用AA作为一种**可选的**用户体验增强功能，例如，允许用户将资金提取到自己的AA钱包，或使用Paymaster赞助某些操作的Gas费，但它**不是**我们核心交易执行架构的一部分。

## 5. 主要竞品分析 (Competitive Landscape)

| 特性 | Phantom Protocol (本项目) | Railgun | Tornado Cash |
| :--- | :--- | :--- | :--- |
| **核心定位** | **行为隐私:** 通过私有订单流匿名执行DeFi操作 | 资产隐私: 匿名持有/转移资产 | 资产隐私: 匿名转移资产 |
| **执行模型** | **由专业Relayer通过私有订单流执行** | 通过专用适配器合约和公共Relayer网络 | 无外��交互，仅限存取 |
| **MEV保护** | **极高:** 核心架构优势，交易不进入公共mempool | **较低:** 交易仍需通过公共mempool，易受攻击 | 不适用 |
| **匿名性** | **极高:** 交易来自协议地址池，与存款地址完全隔离 | **较高:** 交易来自已知的Railgun合约或中继器 | **高:** 仅限转账 |
| **“污染池”问题** | **风险较低:** 交易从独立地址发出，与主池有逻辑隔离 | 存在风险: 所有用户资金在主池中混合 | 风险高 |
| **可组合性** | **较高:** Relayer可灵活集成任何协议 | **有限:** 需为新协议开发专用适配器 | 无 |

## 6. 技术方案前瞻 & 需调研方向

### 6.1. MVP技术栈 (Hackathon Stack)
- **ZK:** Circom & SnarkJS
- **智能合约:** Solidity & Hardhat / Foundry
- **前端:** React / Next.js & Ethers.js / Viem
- **Relayer:** Node.js / Go, Ethers.js, **集成Flashbots API**
- **部署网络:** L2网络，如 Arbitrum, Optimism, Polygon zkEVM。

### 6.2. 关键技术调研方向 (Key Research Areas)
- **MEV感知的Relayer实现:**
    - **核心问题:** 如何构建一个健壮、高效、安全的Relayer，能够可靠地与Flashbots等私有订单流服务商交互？
    - **需研究:** Flashbots (Protect, MEV-Share) API文档、区块构建者生态、交易打包和模拟的最佳实践。
- **ZK电路性能优化:**
    - **核心问题:** 如何降低链上验证Gas成本和前端证明生成时间？
    - **需研究:** 使用对ZK更友好的Poseidon哈希函数、优化电路约束、探索更新的证明系统。
- **Relayer网络的经济模型与去中心化路径:**
    - **核心问题:** 在V2中，如何激励一个（半）去中心化的Relayer网络，并保证其不作恶？
    - **需研究:** Staking和Slashing模型、服务质量证明、节点选举机制。
- **高效的状态同步:**
    - **核心问题:** 前端如何快速扫描并解密属于自己的“私密票据”？
    - **需研究:** 使用The Graph或Subsquid等索引服务为协议建立子图，加速前端数据获取。
