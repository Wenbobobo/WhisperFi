// scripts/deploy.js
const { ethers } = require("hardhat");
const fs = require("fs");
const path = require("path");
const { poseidonContract } = require("circomlibjs");

// --- Inlined Poseidon Deployment Functions ---

async function _deployPoseidon(signer, inputs) {
    console.log(`🚀 开始部署 Poseidon (inputs: ${inputs}) 哈希合约...`);
    const poseidonBytecode = poseidonContract.createCode(inputs);
    const poseidonABI = poseidonContract.generateABI(inputs);
    const PoseidonFactory = new ethers.ContractFactory(poseidonABI, poseidonBytecode, signer);
    const poseidonHasher = await PoseidonFactory.deploy();
    await poseidonHasher.waitForDeployment();
    const contractAddress = await poseidonHasher.getAddress();
    
    console.log(`✅ PoseidonHasher (inputs: ${inputs}) 合约部署成功！`);
    console.log(`📍 合约地址: ${contractAddress}`);
    return { address: contractAddress, contract: poseidonHasher };
}

async function main() {
  const [deployer] = await ethers.getSigners();
  console.log(
    "Deploying contracts with the account:",
    await deployer.getAddress()
  );

  // Deploy Verifier
  const verifierFactory = await ethers.getContractFactory("Groth16Verifier");
  const verifier = await verifierFactory.deploy();
  await verifier.waitForDeployment();
  console.log("Verifier deployed to:", await verifier.getAddress());

  // Deploy Poseidon Hasher (2 inputs)
  const poseidonDeployment = await _deployPoseidon(deployer, 2);
  const poseidonHasherAddress = poseidonDeployment.address;

  // Deploy Poseidon Hasher (5 inputs)
  const poseidon5Deployment = await _deployPoseidon(deployer, 5);
  const poseidonHasher5Address = poseidon5Deployment.address;

  // Deploy MockERC20
  const mockERC20Factory = await ethers.getContractFactory("MockERC20");
  const mockERC20 = await mockERC20Factory.deploy("Mock Token", "MTK", 18, ethers.parseEther("1000000"));
  await mockERC20.waitForDeployment();
  console.log("MockERC20 deployed to:", await mockERC20.getAddress());

  // Deploy MockUniswapRouter
  const mockUniswapRouterFactory = await ethers.getContractFactory("MockUniswapRouter");
  const mockUniswapRouter = await mockUniswapRouterFactory.deploy();
  await mockUniswapRouter.waitForDeployment();
  console.log("MockUniswapRouter deployed to:", await mockUniswapRouter.getAddress());

  // Deploy Executor
  const executorFactory = await ethers.getContractFactory("Executor");
  const executor = await executorFactory.deploy(await deployer.getAddress());
  await executor.waitForDeployment();
  console.log("Executor deployed to:", await executor.getAddress());

  // Deploy SmartAccountFactory
  const factoryFactory = await ethers.getContractFactory("SmartAccountFactory");
  // Assuming EntryPoint is at a known address or needs to be deployed.
  // For simplicity, let's deploy a mock or use a placeholder address.
  // In a real scenario, this would be the official EntryPoint address.
  const entryPointAddress = "0x0000000000000000000000000000000000000001"; // Placeholder
  const factory = await factoryFactory.deploy(entryPointAddress);
  await factory.waitForDeployment();
  console.log("SmartAccountFactory deployed to:", await factory.getAddress());

  // Deploy Paymaster
  const paymasterFactory = await ethers.getContractFactory("Paymaster");
  const paymaster = await paymasterFactory.deploy(entryPointAddress, await deployer.getAddress());
  await paymaster.waitForDeployment();
  console.log("Paymaster deployed to:", await paymaster.getAddress());

  // Deploy PrivacyPool
  const privacyPoolFactory = await ethers.getContractFactory("PrivacyPool");
  const privacyPool = await privacyPoolFactory.deploy(
    await verifier.getAddress(),
    poseidonHasherAddress,
    poseidonHasher5Address,
    await deployer.getAddress()
  );
  await privacyPool.waitForDeployment();
  console.log("PrivacyPool deployed to:", await privacyPool.getAddress());

  console.log("✅ All contracts deployed successfully!");

  // Generate frontend configuration
  const contractsConfig = {
    PRIVACY_POOL_ADDRESS: await privacyPool.getAddress(),
    VERIFIER_ADDRESS: await verifier.getAddress(),
    POSEIDON_HASHER_2_ADDRESS: poseidonHasherAddress,
    POSEIDON_HASHER_5_ADDRESS: poseidonHasher5Address,
  };

  const configPath = path.join(__dirname, "..", "frontend", "src", "config", "contracts.ts");
  const configContent = `// Generated by scripts/deploy.js\nexport const CONTRACTS = ${JSON.stringify(contractsConfig, null, 2)};\n`;
  fs.writeFileSync(configPath, configContent);
  console.log(`✅ Frontend configuration written to ${configPath}`);
}

main()
  .then(() => process.exit(0))
  .catch((error) => {
    console.error(error);
    process.exit(1);
  });
