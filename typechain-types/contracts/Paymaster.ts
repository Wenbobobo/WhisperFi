/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export type PackedUserOperationStruct = {
  sender: AddressLike;
  nonce: BigNumberish;
  initCode: BytesLike;
  callData: BytesLike;
  accountGasLimits: BytesLike;
  preVerificationGas: BigNumberish;
  gasFees: BytesLike;
  paymasterAndData: BytesLike;
  signature: BytesLike;
};

export type PackedUserOperationStructOutput = [
  sender: string,
  nonce: bigint,
  initCode: string,
  callData: string,
  accountGasLimits: string,
  preVerificationGas: bigint,
  gasFees: string,
  paymasterAndData: string,
  signature: string
] & {
  sender: string;
  nonce: bigint;
  initCode: string;
  callData: string;
  accountGasLimits: string;
  preVerificationGas: bigint;
  gasFees: string;
  paymasterAndData: string;
  signature: string;
};

export interface PaymasterInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "createPaymasterAndData"
      | "depositToEntryPoint"
      | "entryPoint"
      | "owner"
      | "postOp"
      | "renounceOwnership"
      | "setSupportedTarget"
      | "supportedTargets"
      | "transferOwnership"
      | "validatePaymasterUserOp"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "FundsDeposited"
      | "OwnershipTransferred"
      | "TargetSupportChanged"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "createPaymasterAndData",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositToEntryPoint",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "entryPoint",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "postOp",
    values: [BigNumberish, BytesLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setSupportedTarget",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "supportedTargets",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "validatePaymasterUserOp",
    values: [PackedUserOperationStruct, BytesLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "createPaymasterAndData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositToEntryPoint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "entryPoint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "postOp", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSupportedTarget",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportedTargets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validatePaymasterUserOp",
    data: BytesLike
  ): Result;
}

export namespace FundsDepositedEvent {
  export type InputTuple = [depositor: AddressLike, amount: BigNumberish];
  export type OutputTuple = [depositor: string, amount: bigint];
  export interface OutputObject {
    depositor: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TargetSupportChangedEvent {
  export type InputTuple = [target: AddressLike, supported: boolean];
  export type OutputTuple = [target: string, supported: boolean];
  export interface OutputObject {
    target: string;
    supported: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Paymaster extends BaseContract {
  connect(runner?: ContractRunner | null): Paymaster;
  waitForDeployment(): Promise<this>;

  interface: PaymasterInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  createPaymasterAndData: TypedContractMethod<
    [
      verificationGasLimit: BigNumberish,
      postOpGasLimit: BigNumberish,
      validUntil: BigNumberish,
      validAfter: BigNumberish
    ],
    [string],
    "view"
  >;

  depositToEntryPoint: TypedContractMethod<[], [void], "payable">;

  entryPoint: TypedContractMethod<[], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  postOp: TypedContractMethod<
    [
      arg0: BigNumberish,
      arg1: BytesLike,
      arg2: BigNumberish,
      arg3: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setSupportedTarget: TypedContractMethod<
    [target: AddressLike, supported: boolean],
    [void],
    "nonpayable"
  >;

  supportedTargets: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  validatePaymasterUserOp: TypedContractMethod<
    [userOp: PackedUserOperationStruct, arg1: BytesLike, arg2: BigNumberish],
    [[string, bigint] & { context: string; validationData: bigint }],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "createPaymasterAndData"
  ): TypedContractMethod<
    [
      verificationGasLimit: BigNumberish,
      postOpGasLimit: BigNumberish,
      validUntil: BigNumberish,
      validAfter: BigNumberish
    ],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "depositToEntryPoint"
  ): TypedContractMethod<[], [void], "payable">;
  getFunction(
    nameOrSignature: "entryPoint"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "postOp"
  ): TypedContractMethod<
    [
      arg0: BigNumberish,
      arg1: BytesLike,
      arg2: BigNumberish,
      arg3: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setSupportedTarget"
  ): TypedContractMethod<
    [target: AddressLike, supported: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "supportedTargets"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "validatePaymasterUserOp"
  ): TypedContractMethod<
    [userOp: PackedUserOperationStruct, arg1: BytesLike, arg2: BigNumberish],
    [[string, bigint] & { context: string; validationData: bigint }],
    "view"
  >;

  getEvent(
    key: "FundsDeposited"
  ): TypedContractEvent<
    FundsDepositedEvent.InputTuple,
    FundsDepositedEvent.OutputTuple,
    FundsDepositedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "TargetSupportChanged"
  ): TypedContractEvent<
    TargetSupportChangedEvent.InputTuple,
    TargetSupportChangedEvent.OutputTuple,
    TargetSupportChangedEvent.OutputObject
  >;

  filters: {
    "FundsDeposited(address,uint256)": TypedContractEvent<
      FundsDepositedEvent.InputTuple,
      FundsDepositedEvent.OutputTuple,
      FundsDepositedEvent.OutputObject
    >;
    FundsDeposited: TypedContractEvent<
      FundsDepositedEvent.InputTuple,
      FundsDepositedEvent.OutputTuple,
      FundsDepositedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "TargetSupportChanged(address,bool)": TypedContractEvent<
      TargetSupportChangedEvent.InputTuple,
      TargetSupportChangedEvent.OutputTuple,
      TargetSupportChangedEvent.OutputObject
    >;
    TargetSupportChanged: TypedContractEvent<
      TargetSupportChangedEvent.InputTuple,
      TargetSupportChangedEvent.OutputTuple,
      TargetSupportChangedEvent.OutputObject
    >;
  };
}
