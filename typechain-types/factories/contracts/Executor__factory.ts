/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../common";
import type { Executor, ExecutorInterface } from "../../contracts/Executor";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "initialOwner",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "OwnableInvalidOwner",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "OwnableUnauthorizedAccount",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "target",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "callData",
        type: "bytes",
      },
    ],
    name: "execute",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5060405161096f38038061096f833981810160405281019061003291906101e2565b80600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036100a55760006040517f1e4fbdf700000000000000000000000000000000000000000000000000000000815260040161009c919061021e565b60405180910390fd5b6100b4816100bb60201b60201c565b5050610239565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006101af82610184565b9050919050565b6101bf816101a4565b81146101ca57600080fd5b50565b6000815190506101dc816101b6565b92915050565b6000602082840312156101f8576101f761017f565b5b6000610206848285016101cd565b91505092915050565b610218816101a4565b82525050565b6000602082019050610233600083018461020f565b92915050565b610727806102486000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80631cff79cd14610051578063715018a61461006d5780638da5cb5b14610077578063f2fde38b14610095575b600080fd5b61006b60048036038101906100669190610539565b6100b1565b005b61007561016b565b005b61007f61017f565b60405161008c91906105a4565b60405180910390f35b6100af60048036038101906100aa91906105bf565b6101a8565b005b6100b961022e565b60008273ffffffffffffffffffffffffffffffffffffffff16826040516100e0919061065d565b6000604051808303816000865af19150503d806000811461011d576040519150601f19603f3d011682016040523d82523d6000602084013e610122565b606091505b5050905080610166576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161015d906106d1565b60405180910390fd5b505050565b61017361022e565b61017d60006102b5565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6101b061022e565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036102225760006040517f1e4fbdf700000000000000000000000000000000000000000000000000000000815260040161021991906105a4565b60405180910390fd5b61022b816102b5565b50565b610236610379565b73ffffffffffffffffffffffffffffffffffffffff1661025461017f565b73ffffffffffffffffffffffffffffffffffffffff16146102b357610277610379565b6040517f118cdaa70000000000000000000000000000000000000000000000000000000081526004016102aa91906105a4565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006103c082610395565b9050919050565b6103d0816103b5565b81146103db57600080fd5b50565b6000813590506103ed816103c7565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610446826103fd565b810181811067ffffffffffffffff821117156104655761046461040e565b5b80604052505050565b6000610478610381565b9050610484828261043d565b919050565b600067ffffffffffffffff8211156104a4576104a361040e565b5b6104ad826103fd565b9050602081019050919050565b82818337600083830152505050565b60006104dc6104d784610489565b61046e565b9050828152602081018484840111156104f8576104f76103f8565b5b6105038482856104ba565b509392505050565b600082601f8301126105205761051f6103f3565b5b81356105308482602086016104c9565b91505092915050565b600080604083850312156105505761054f61038b565b5b600061055e858286016103de565b925050602083013567ffffffffffffffff81111561057f5761057e610390565b5b61058b8582860161050b565b9150509250929050565b61059e816103b5565b82525050565b60006020820190506105b96000830184610595565b92915050565b6000602082840312156105d5576105d461038b565b5b60006105e3848285016103de565b91505092915050565b600081519050919050565b600081905092915050565b60005b83811015610620578082015181840152602081019050610605565b60008484015250505050565b6000610637826105ec565b61064181856105f7565b9350610651818560208601610602565b80840191505092915050565b6000610669828461062c565b915081905092915050565b600082825260208201905092915050565b7f45787465726e616c2063616c6c206661696c6564000000000000000000000000600082015250565b60006106bb601483610674565b91506106c682610685565b602082019050919050565b600060208201905081810360008301526106ea816106ae565b905091905056fea26469706673582212209415bf3ae4e25d646927b0295817fa9646d18c22899d3cec7ce5992ef31bc14464736f6c63430008180033";

type ExecutorConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ExecutorConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Executor__factory extends ContractFactory {
  constructor(...args: ExecutorConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    initialOwner: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(initialOwner, overrides || {});
  }
  override deploy(
    initialOwner: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(initialOwner, overrides || {}) as Promise<
      Executor & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): Executor__factory {
    return super.connect(runner) as Executor__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ExecutorInterface {
    return new Interface(_abi) as ExecutorInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): Executor {
    return new Contract(address, _abi, runner) as unknown as Executor;
  }
}
