/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../common";
import type {
  TestAccount,
  TestAccountInterface,
} from "../../contracts/TestAccount";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract IEntryPoint",
        name: "_entryPoint",
        type: "address",
      },
      {
        internalType: "address",
        name: "_owner",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "ECDSAInvalidSignature",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "length",
        type: "uint256",
      },
    ],
    name: "ECDSAInvalidSignatureLength",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "s",
        type: "bytes32",
      },
    ],
    name: "ECDSAInvalidSignatureS",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "contract IEntryPoint",
        name: "entryPoint",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "AccountInitialized",
    type: "event",
  },
  {
    inputs: [],
    name: "entryPoint",
    outputs: [
      {
        internalType: "contract IEntryPoint",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "dest",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "func",
        type: "bytes",
      },
    ],
    name: "execute",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "sender",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "nonce",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "initCode",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "callData",
            type: "bytes",
          },
          {
            internalType: "bytes32",
            name: "accountGasLimits",
            type: "bytes32",
          },
          {
            internalType: "uint256",
            name: "preVerificationGas",
            type: "uint256",
          },
          {
            internalType: "bytes32",
            name: "gasFees",
            type: "bytes32",
          },
          {
            internalType: "bytes",
            name: "paymasterAndData",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "signature",
            type: "bytes",
          },
        ],
        internalType: "struct PackedUserOperation",
        name: "userOp",
        type: "tuple",
      },
      {
        internalType: "bytes32",
        name: "userOpHash",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "missingAccountFunds",
        type: "uint256",
      },
    ],
    name: "validateUserOp",
    outputs: [
      {
        internalType: "uint256",
        name: "validationData",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
] as const;

const _bytecode =
  "0x60a060405234801561000f575f5ffd5b5060405161083938038061083983398101604081905261002e91610098565b6001600160a01b0382811660808190525f80546001600160a01b03191692841692831781556040517f526ffefac8167421b9048ae3377810715d834479565b0182ea4155f0efa4c3809190a350506100d0565b6001600160a01b0381168114610095575f5ffd5b50565b5f5f604083850312156100a9575f5ffd5b82516100b481610081565b60208401519092506100c581610081565b809150509250929050565b6080516107446100f55f395f818160c501528181610114015261024601526107445ff3fe608060405260043610610041575f3560e01c806319822f7c1461004c5780638da5cb5b1461007e578063b0d691fe146100b4578063b61d27f6146100e7575f5ffd5b3661004857005b5f5ffd5b348015610057575f5ffd5b5061006b6100663660046105c2565b610108565b6040519081526020015b60405180910390f35b348015610089575f5ffd5b505f5461009c906001600160a01b031681565b6040516001600160a01b039091168152602001610075565b3480156100bf575f5ffd5b5061009c7f000000000000000000000000000000000000000000000000000000000000000081565b3480156100f2575f5ffd5b50610106610101366004610611565b61023b565b005b5f336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146101805760405162461bcd60e51b81526020600482015260176024820152761858d8dbdd5b9d0e881b9bdd08115b9d1c9e541bda5b9d604a1b60448201526064015b60405180910390fd5b61018a8484610323565b90508115610234576040515f90339084908381818185875af1925050503d805f81146101d1576040519150601f19603f3d011682016040523d82523d5f602084013e6101d6565b606091505b50509050806102325760405162461bcd60e51b815260206004820152602260248201527f6163636f756e743a206661696c656420746f2066756e6420456e747279506f696044820152611b9d60f21b6064820152608401610177565b505b9392505050565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146102ad5760405162461bcd60e51b81526020600482015260176024820152761858d8dbdd5b9d0e881b9bdd08115b9d1c9e541bda5b9d604a1b6044820152606401610177565b5f5f856001600160a01b03168585856040516102ca9291906106a1565b5f6040518083038185875af1925050503d805f8114610304576040519150601f19603f3d011682016040523d82523d5f602084013e610309565b606091505b50915091508161031b57805160208201fd5b505050505050565b7f19457468657265756d205369676e6564204d6573736167653a0a3332000000005f908152601c829052603c81205f61039f6103636101008701876106b0565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284375f9201919091525086939250506103cd9050565b5f549091506001600160a01b038083169116146103c1576001925050506103c7565b5f925050505b92915050565b5f5f5f5f6103db86866103f5565b9250925092506103eb828261043e565b5090949350505050565b5f5f5f835160410361042c576020840151604085015160608601515f1a61041e888285856104fa565b955095509550505050610437565b505081515f91506002905b9250925092565b5f826003811115610451576104516106fa565b0361045a575050565b600182600381111561046e5761046e6106fa565b0361048c5760405163f645eedf60e01b815260040160405180910390fd5b60028260038111156104a0576104a06106fa565b036104c15760405163fce698f760e01b815260048101829052602401610177565b60038260038111156104d5576104d56106fa565b036104f6576040516335e2f38360e21b815260048101829052602401610177565b5050565b5f80807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a084111561053357505f915060039050826105b8565b604080515f808252602082018084528a905260ff891692820192909252606081018790526080810186905260019060a0016020604051602081039080840390855afa158015610584573d5f5f3e3d5ffd5b5050604051601f1901519150506001600160a01b0381166105af57505f9250600191508290506105b8565b92505f91508190505b9450945094915050565b5f5f5f606084860312156105d4575f5ffd5b833567ffffffffffffffff8111156105ea575f5ffd5b840161012081870312156105fc575f5ffd5b95602085013595506040909401359392505050565b5f5f5f5f60608587031215610624575f5ffd5b84356001600160a01b038116811461063a575f5ffd5b935060208501359250604085013567ffffffffffffffff81111561065c575f5ffd5b8501601f8101871361066c575f5ffd5b803567ffffffffffffffff811115610682575f5ffd5b876020828401011115610693575f5ffd5b949793965060200194505050565b818382375f9101908152919050565b5f5f8335601e198436030181126106c5575f5ffd5b83018035915067ffffffffffffffff8211156106df575f5ffd5b6020019150368190038213156106f3575f5ffd5b9250929050565b634e487b7160e01b5f52602160045260245ffdfea26469706673582212203755a1a585b510920d55f66ced98107ea16791226d5992c5669d86a9b26049c564736f6c634300081c0033";

type TestAccountConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestAccountConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TestAccount__factory extends ContractFactory {
  constructor(...args: TestAccountConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    _entryPoint: AddressLike,
    _owner: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(_entryPoint, _owner, overrides || {});
  }
  override deploy(
    _entryPoint: AddressLike,
    _owner: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(_entryPoint, _owner, overrides || {}) as Promise<
      TestAccount & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): TestAccount__factory {
    return super.connect(runner) as TestAccount__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestAccountInterface {
    return new Interface(_abi) as TestAccountInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): TestAccount {
    return new Contract(address, _abi, runner) as unknown as TestAccount;
  }
}
