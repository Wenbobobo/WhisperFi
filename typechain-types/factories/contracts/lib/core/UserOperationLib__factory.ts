/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../../common";
import type {
  UserOperationLib,
  UserOperationLibInterface,
} from "../../../../contracts/lib/core/UserOperationLib";

const _abi = [
  {
    inputs: [],
    name: "PAYMASTER_DATA_OFFSET",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "PAYMASTER_POSTOP_GAS_OFFSET",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "PAYMASTER_VALIDATION_GAS_OFFSET",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60a76032600b8282823980515f1a607314602657634e487b7160e01b5f525f60045260245ffd5b305f52607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106046575f3560e01c806325093e1b14604a578063b29a8ff4146063578063ede3150214606a575b5f5ffd5b6051602481565b60405190815260200160405180910390f35b6051601481565b605160348156fea26469706673582212201cb2b01fb83ea887fc3fefea87fcaee3e727f048af20ece90e77d2217494dadd64736f6c634300081c0033";

type UserOperationLibConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: UserOperationLibConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class UserOperationLib__factory extends ContractFactory {
  constructor(...args: UserOperationLibConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      UserOperationLib & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): UserOperationLib__factory {
    return super.connect(runner) as UserOperationLib__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): UserOperationLibInterface {
    return new Interface(_abi) as UserOperationLibInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): UserOperationLib {
    return new Contract(address, _abi, runner) as unknown as UserOperationLib;
  }
}
