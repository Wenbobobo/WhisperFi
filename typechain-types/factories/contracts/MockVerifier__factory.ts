/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../common";
import type {
  MockVerifier,
  MockVerifierInterface,
} from "../../contracts/MockVerifier";

const _abi = [
  {
    inputs: [
      {
        internalType: "bool",
        name: "shouldAccept",
        type: "bool",
      },
    ],
    name: "setShouldAccept",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    name: "verifyProof",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405260016000806101000a81548160ff02191690831515021790555034801561002a57600080fd5b506102738061003a6000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80636413b8531461003b578063b8e72af614610057575b600080fd5b61005560048036038101906100509190610100565b610087565b005b610071600480360381019061006c9190610192565b6100a3565b60405161007e9190610222565b60405180910390f35b806000806101000a81548160ff02191690831515021790555050565b60008060009054906101000a900460ff169050949350505050565b600080fd5b600080fd5b60008115159050919050565b6100dd816100c8565b81146100e857600080fd5b50565b6000813590506100fa816100d4565b92915050565b600060208284031215610116576101156100be565b5b6000610124848285016100eb565b91505092915050565b600080fd5b600080fd5b600080fd5b60008083601f8401126101525761015161012d565b5b8235905067ffffffffffffffff81111561016f5761016e610132565b5b60208301915083600182028301111561018b5761018a610137565b5b9250929050565b600080600080604085870312156101ac576101ab6100be565b5b600085013567ffffffffffffffff8111156101ca576101c96100c3565b5b6101d68782880161013c565b9450945050602085013567ffffffffffffffff8111156101f9576101f86100c3565b5b6102058782880161013c565b925092505092959194509250565b61021c816100c8565b82525050565b60006020820190506102376000830184610213565b9291505056fea2646970667358221220e65f6884ec5dd07e3922eeb99ddb0805cf1c896be4849b2fc9186546859d9dfc64736f6c63430008180033";

type MockVerifierConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockVerifierConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockVerifier__factory extends ContractFactory {
  constructor(...args: MockVerifierConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      MockVerifier & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): MockVerifier__factory {
    return super.connect(runner) as MockVerifier__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockVerifierInterface {
    return new Interface(_abi) as MockVerifierInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): MockVerifier {
    return new Contract(address, _abi, runner) as unknown as MockVerifier;
  }
}
